[{"/Users/jmilani/Dropbox/Coding/capex/src/index.js":"1","/Users/jmilani/Dropbox/Coding/capex/src/App.js":"2","/Users/jmilani/Dropbox/Coding/capex/src/reportWebVitals.js":"3","/Users/jmilani/Dropbox/Coding/capex/src/serviceWorker.js":"4","/Users/jmilani/Dropbox/Coding/capex/src/ColorModeSwitcher.js":"5","/Users/jmilani/Dropbox/Coding/capex/src/Logo.js":"6","/Users/jmilani/Dropbox/Coding/capex/src/components/expense.js":"7","/Users/jmilani/Dropbox/Coding/capex/src/data.js":"8","/Users/jmilani/Dropbox/Coding/capex/src/components/totalCost.js":"9","/Users/jmilani/Dropbox/Coding/capex/src/components/header.js":"10","/Users/jmilani/Dropbox/Coding/capex/src/components/sideBar.js":"11","/Users/jmilani/Dropbox/Coding/capex/src/components/main.js":"12","/Users/jmilani/Dropbox/Coding/capex/src/components/replacementOptions.js":"13","/Users/jmilani/Dropbox/Coding/capex/src/hooks/useUpdateUserData.js":"14"},{"size":840,"mtime":1611285712926,"results":"15","hashOfConfig":"16"},{"size":1441,"mtime":1611863171667,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1611285712927,"results":"18","hashOfConfig":"16"},{"size":5081,"mtime":1611285712927,"results":"19","hashOfConfig":"16"},{"size":617,"mtime":1611285712926,"results":"20","hashOfConfig":"16"},{"size":489,"mtime":1611285712926,"results":"21","hashOfConfig":"16"},{"size":5579,"mtime":1612061254000,"results":"22","hashOfConfig":"16"},{"size":2931,"mtime":1611929835400,"results":"23","hashOfConfig":"16"},{"size":156,"mtime":1611291033855,"results":"24","hashOfConfig":"16"},{"size":405,"mtime":1611326214911,"results":"25","hashOfConfig":"16"},{"size":1041,"mtime":1611769626766,"results":"26","hashOfConfig":"16"},{"size":641,"mtime":1611868590099,"results":"27","hashOfConfig":"16"},{"size":4042,"mtime":1611850073881,"results":"28","hashOfConfig":"16"},{"size":474,"mtime":1612061261536,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"15khwut",{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jmilani/Dropbox/Coding/capex/src/index.js",[],["61","62"],"/Users/jmilani/Dropbox/Coding/capex/src/App.js",["63","64"],"import React, { useState, useEffect } from 'react';\nimport {\n  ChakraProvider,\n  theme,\n  Grid,\n  Spinner,\n  Flex,\n  Box\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport Header from './components/header'\nimport SideBar from './components/sideBar';\nimport Main from './components/main'\n\nimport { capitalExpenseList } from './data'\n\n\nfunction App() {\n  \n  const [focusedExpense, setFocusedExpense] = useState(capitalExpenseList[0]?.name)\n  \n  const [data, setData] = useState({\n    loading: true,\n    user: []\n  })\n\nuseEffect(() => {\n    setData({\n      loading: false,\n      user: JSON.parse(localStorage.getItem('capexData')) || capitalExpenseList\n    })\n  }, [])\n\n  if (data.loading) return (\n    <Flex\n    justifyContent=\"center\"\n    alignItems=\"center\"\n    w=\"100vw\"\n    h=\"100vh\"\n    >\n        <Spinner\n          w={24}\n          h={24}\n          size=\"lg\"/>\n    </Flex>\n  )\n\n  return (\n    <ChakraProvider theme={theme}>\n          <Header />\n          <Grid\n          templateColumns=\"1fr 3fr\"\n          >\n            <SideBar\n            data={data.user}\n            setFocusedExpense={setFocusedExpense}\n            focusedExpense={focusedExpense}\n            />\n            \n            <Main\n            focusedExpense={focusedExpense}\n            data={data.user}\n            setData={setData}\n            />\n            \n          </Grid>\n    </ChakraProvider>\n  );\n}\n\nexport default App;","/Users/jmilani/Dropbox/Coding/capex/src/reportWebVitals.js",[],"/Users/jmilani/Dropbox/Coding/capex/src/serviceWorker.js",[],"/Users/jmilani/Dropbox/Coding/capex/src/ColorModeSwitcher.js",[],"/Users/jmilani/Dropbox/Coding/capex/src/Logo.js",[],"/Users/jmilani/Dropbox/Coding/capex/src/components/expense.js",["65","66","67","68","69"],"/Users/jmilani/Dropbox/Coding/capex/src/data.js",[],"/Users/jmilani/Dropbox/Coding/capex/src/components/totalCost.js",[],"/Users/jmilani/Dropbox/Coding/capex/src/components/header.js",[],"/Users/jmilani/Dropbox/Coding/capex/src/components/sideBar.js",[],"/Users/jmilani/Dropbox/Coding/capex/src/components/main.js",[],"/Users/jmilani/Dropbox/Coding/capex/src/components/replacementOptions.js",["70"],"import React, { useState, useEffect, useRef } from 'react'\nimport {\n    Drawer,\n    DrawerBody,\n    DrawerFooter,\n    DrawerHeader,\n    DrawerOverlay,\n    DrawerContent,\n    DrawerCloseButton,\n    useDisclosure,\n    Button,\n    Box,\n    Input,\n    Select,\n    FormLabel,\n    Stat,\n    StatLabel,\n    StatNumber,\n    Tooltip,\n    useToast\n  } from \"@chakra-ui/react\"\n\nconst ReplacementOptionsDrawer = ({ filteredData, setReplacementCost }) => {\n    const { isOpen, onOpen, onClose } = useDisclosure()\n    const btnRef = useRef()\n    const toast = useToast()\n\n    const [selectedOption, setSelectedOption] = useState('')\n    const [selectedOptionArr, setSelectedOptionArr] = useState([])\n    const [units, setUnits] = useState(0)\n    const [unitCost, setUnitCost] = useState(0)\n    const [itemNote, setItemNote] = useState('Select a product.')\n    const [totalCost, setTotalCost] = useState(0)\n    \n\n    const handleSelectOption = e => {\n        setSelectedOption(e.target.value)\n    }\n\n    useEffect(() => {\n        setSelectedOptionArr(filteredData.replacementOptions.filter(i => i.name === selectedOption))\n    }, [selectedOption])\n\n    useEffect(() => {\n        setUnits(selectedOptionArr[0]?.units)\n        setUnitCost(selectedOptionArr[0]?.unitCost)\n        setItemNote(selectedOptionArr[0]?.note)\n    }, [selectedOptionArr])\n\n    useEffect(() => {\n        setTotalCost(units * unitCost)\n    }, [units, unitCost])\n\n    return (\n        <Box\n        mt={-4}\n        mb={8}\n        >\n            <Button ref={btnRef} colorScheme=\"gray\" onClick={onOpen}>\n        Replacement Cost Assistant\n      </Button>\n      <Drawer\n        isOpen={isOpen}\n        placement=\"right\"\n        onClose={onClose}\n        finalFocusRef={btnRef}\n      >\n        <DrawerOverlay>\n          <DrawerContent>\n            <DrawerCloseButton />\n            <DrawerHeader>Replacement Cost <br />Assistant</DrawerHeader>\n\n            <DrawerBody>\n            <Box>\n                <Tooltip label={itemNote} aria-label=\"A tooltip\">\n                \n            \n                    <Select\n                    placeholder=\"Select option\"\n                    mb={8}\n                    value={selectedOption}\n                    onChange={handleSelectOption}\n                    >\n                        {filteredData.replacementOptions.map( i => (\n                            <option key={i.name} value={i.name}>{i.name}</option>\n                        ))}\n                    </Select>\n                </Tooltip>\n                <FormLabel htmlFor=\"units\">Number of units ({filteredData.unit})</FormLabel>\n                <Input\n                type=\"number\"\n                mb={8}\n                value={units}\n                onChange={e => {\n                    setUnits(e.target.value)\n                }}\n                />\n                <FormLabel htmlFor=\"unitCost\">Price per {filteredData.unit} (dollars)</FormLabel>\n                <Input\n                type=\"number\"\n                mb={8}\n                value={unitCost}\n                onChange={e => {\n                    setUnitCost(e.target.value)\n                }}\n                />\n            </Box>\n            <Stat>\n                    <StatLabel>Total Replacement Cost</StatLabel>\n                    <StatNumber>{isNaN(totalCost) ? 0 : totalCost}</StatNumber>\n                </Stat>\n            </DrawerBody>\n\n            <DrawerFooter>\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\n                Cancel\n              </Button>\n              <Button color=\"blue\" onClick={() => {\n                  onClose()\n                  setReplacementCost(totalCost)\n                  toast({\n                    title: \"Replacement Cost Updated\",\n                    status: \"success\",\n                    duration: 2000,\n                    isClosable: true,\n                  })\n                  }}>Save</Button>\n            </DrawerFooter>\n          </DrawerContent>\n        </DrawerOverlay>\n      </Drawer>\n        </Box>\n    )\n}\n\nexport default ReplacementOptionsDrawer\n","/Users/jmilani/Dropbox/Coding/capex/src/hooks/useUpdateUserData.js",["71"],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":8,"column":3,"nodeType":"78","messageId":"79","endLine":8,"endColumn":6},{"ruleId":"76","severity":1,"message":"80","line":10,"column":10,"nodeType":"78","messageId":"79","endLine":10,"endColumn":27},{"ruleId":"76","severity":1,"message":"81","line":18,"column":12,"nodeType":"78","messageId":"79","endLine":18,"endColumn":27},{"ruleId":"76","severity":1,"message":"82","line":38,"column":11,"nodeType":"78","messageId":"79","endLine":38,"endColumn":32},{"ruleId":"76","severity":1,"message":"83","line":49,"column":11,"nodeType":"78","messageId":"79","endLine":49,"endColumn":25},{"ruleId":"76","severity":1,"message":"84","line":61,"column":11,"nodeType":"78","messageId":"79","endLine":61,"endColumn":20},{"ruleId":"85","severity":1,"message":"86","line":114,"column":8,"nodeType":"87","endLine":114,"endColumn":26,"suggestions":"88"},{"ruleId":"85","severity":1,"message":"89","line":42,"column":8,"nodeType":"87","endLine":42,"endColumn":24,"suggestions":"90"},{"ruleId":"85","severity":1,"message":"91","line":16,"column":8,"nodeType":"87","endLine":16,"endColumn":18,"suggestions":"92"},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'ColorModeSwitcher' is defined but never used.","'replacementCost' is assigned a value but never used.","'handleReplacementCost' is assigned a value but never used.","'handleLifespan' is assigned a value but never used.","'handleAge' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handleAnnualCAPEX' and 'handleMonthlyCAPEX'. Either include them or remove the dependency array.","ArrayExpression",["95"],"React Hook useEffect has a missing dependency: 'filteredData.replacementOptions'. Either include it or remove the dependency array. If 'setSelectedOptionArr' needs the current value of 'filteredData.replacementOptions', you can also switch to useReducer instead of useState and read 'filteredData.replacementOptions' in the reducer.",["96"],"React Hook useEffect has missing dependencies: 'data', 'filteredData', and 'setter'. Either include them or remove the dependency array. If 'setter' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["97"],"no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},"Update the dependencies array to be: [data, formInputs, handleAnnualCAPEX, handleMonthlyCAPEX]",{"range":"104","text":"105"},"Update the dependencies array to be: [filteredData.replacementOptions, selectedOption]",{"range":"106","text":"107"},"Update the dependencies array to be: [data, filteredData, inputObj, setter]",{"range":"108","text":"109"},[2994,3012],"[data, formInputs, handleAnnualCAPEX, handleMonthlyCAPEX]",[1115,1131],"[filteredData.replacementOptions, selectedOption]",[426,436],"[data, filteredData, inputObj, setter]"]